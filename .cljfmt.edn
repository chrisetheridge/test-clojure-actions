{:indents
 {;; compojure
  defroutes                [[:inner 0]]
  def-restricted-routes    [[:inner 0]]
  context                  [[:inner 0]]
  GET                      [[:inner 0]]
  POST                     [[:inner 0]]
  ;; radiant
  def-component-state      [[:inner 0]]
  ;; component
  start                    [[:inner 0]]
  stop                     [[:inner 0]]
  init                     [[:inner 0]]
  db                       [[:inner 0]]
  conn                     [[:inner 0]]
  ;; shadow-cljs
  shadow.modern/defclass   [[:block 1] [:inner 1]]
  shadow.modern/js-await   [[:inner 0]]
  ;; rum
  rum/defcs                [[:inner 0]]
  rum/defc                 [[:inner 0]]
  rum/defcc                [[:inner 0]]
  rum/bind-context         [[:inner 0]]
  rum/use-context          [[:inner 0]]
  rum/with-context         [[:inner 0]]
  ;; tufte
  tufte/p                  [[:inner 0]]
  tufte/profile            [[:inner 0]]
  tufte/profiled           [[:inner 0]]
  tufte/defnp              [[:inner 0]]
  defnp                    [[:inner 0]]
  tufte/fnp                [[:inner 0]]
  ;; logging
  logging/timed-run        [[:inner 0]]
  ;; radiant
  def-component            [[:inner 0]]
  ;; datalog
  and-join                 [[:inner 0]]
  or-join                  [[:inner 0]]
  not-join                 [[:inner 0]]
  ;; chat
  macros/compile-when      [[:inner 0]]
  compile-when             [[:inner 0]]
  error/with-reporting     [[:inner 0]]
  with-reporting           [[:inner 0]]
  ;; base
  config/with-config       [[:inner 0]]
  with-config              [[:inner 0]]
  ;; manage api
  admin-only!              [[:inner 0]]
  group-editor-only!       [[:inner 0]]
  clear-learner-data-only! [[:inner 0]]
  ;; hiccup
  page/html5               [[:inner 0]]
  ;; Clojure
  this-as                  [[:inner 0]]
  add-watch                [[:inner 0]]
  alt!                     [[:block 0]]
  alt!!                    [[:block 0]]
  are                      [[:block 2]]
  as->                     [[:block 2]]
  binding                  [[:block 1]]
  bound-fn                 [[:inner 0]]
  case                     [[:block 1]]
  catch                    [[:block 2]]
  comment                  [[:block 0]]
  cond                     [[:block 0]]
  condp                    [[:block 2]]
  cond->                   [[:block 1]]
  cond->>                  [[:block 1]]
  def                      [[:inner 0]]
  defmacro                 [[:inner 0]]
  defmethod                [[:inner 0]]
  defmulti                 [[:inner 0]]
  defn                     [[:inner 0]]
  defn-                    [[:inner 0]]
  defonce                  [[:inner 0]]
  defprotocol              [[:block 1] [:inner 1]]
  defrecord                [[:block 2] [:inner 1]]
  defstruct                [[:block 1]]
  deftest                  [[:inner 0]]
  deftype                  [[:block 2] [:inner 1]]
  do                       [[:block 0]]
  doseq                    [[:block 1]]
  dotimes                  [[:block 1]]
  doto                     [[:block 1]]
  extend                   [[:block 1]]
  extend-protocol          [[:block 1] [:inner 1]]
  extend-type              [[:block 1] [:inner 1]]
  fdef                     [[:inner 0]]
  finally                  [[:block 0]]
  fn                       [[:inner 0]]
  for                      [[:block 1]]
  future                   [[:block 0]]
  go                       [[:block 0]]
  go-loop                  [[:block 1]]
  if                       [[:block 1]]
  if-let                   [[:block 1]]
  if-not                   [[:block 1]]
  if-some                  [[:block 1]]
  let                      [[:block 1]]
  letfn                    [[:block 1] [:inner 2 0]]
  locking                  [[:block 1]]
  loop                     [[:block 1]]
  match                    [[:block 1]]
  ns                       [[:block 1]]
  proxy                    [[:block 2] [:inner 1]]
  reify                    [[:inner 0] [:inner 1]]
  struct-map               [[:block 1]]
  testing                  [[:block 1]]
  thread                   [[:block 0]]
  try                      [[:block 0]]
  use-fixtures             [[:inner 0]]
  when                     [[:block 1]]
  when-first               [[:block 1]]
  when-let                 [[:block 1]]
  when-not                 [[:block 1]]
  when-some                [[:block 1]]
  while                    [[:block 1]]
  with-local-vars          [[:block 1]]
  with-open                [[:block 1]]
  with-out-str             [[:block 0]]
  with-precision           [[:block 1]]
  with-redefs              [[:block 1]]}}
